# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[package]
name = "osmgraphing" # lib.rs
default-run = "osmgraphing" # bin/osmgraphing.rs
# Changing this version in a branch 'release' and pushing it to
# GitHub will lead to publishing it automatically to crates.io.
# Hence do not forget updating Unreleased in CHANGELOG.md.
version = "0.9.0" # !!!
description = "Playing around with graphs created via parsing OpenStreetMap data"
edition = "2018"

authors = [
    "Parga Cacheiro, Dominic (dominic.parga@gmail.com)",
]
repository = "https://github.com/dominicparga/osmgraphing"
readme = "README.md"
keywords = ["osm", "route", "routing", "pbf", "xml"]
categories = ["algorithms", "data-structures", "parser-implementations", "parsing"]
license-file = "LICENSE"


[features]
osmgraphing = ["rand", "rand_pcg"]


[[bin]]
name = 'osmgraphing' # bin/osmgraphing.rs
required-features = ["osmgraphing"]


[[example]]
name = "parser"
path = "examples/parser.rs"

[[example]]
name = "dijkstra"
path = "examples/dijkstra.rs"

[[example]]
name = "playground_actix"
path = "examples/playground/actix.rs"

[[example]]
name = "playground_random"
path = "examples/playground/random.rs"

[[example]]
name = "playground_edge-containers"
path = "examples/playground/edge_containers.rs"

[[example]]
name = "playground_graph"
path = "examples/playground/graph.rs"

[[example]]
name = "playground_multithreading"
path = "examples/playground/multithreading.rs"

[[example]]
name = "playground_pipes_and_filters"
path = "examples/playground/pipes_and_filters.rs"

[[example]]
name = "playground_xml_reader"
path = "examples/playground/xml_reader.rs"


[[bench]]
name = "routing"
harness = false


[dependencies]
chrono = "0.4" # pretty date and time
clap = "2.33" # cmdline-parsing
env_logger = "0.6" # logging for external use, e.g. main.rs and examples
log = "0.4"        # logging for internal use, e.g. lib.rs
osmpbfreader = "0.13" # read osm.pbf-files
progressing = "2" # progress-bar
serde = "1" # serialization
serde_yaml = "0.8" # (de-)serialization
smallvec = "1" # inlining small vecs

# generate random numbers
# bin/osmgraphing
rand = { version = "0.7", optional = true }
# generate random numbers
# bin/osmgraphing
rand_pcg = { version = "0.2", optional = true }


[dev-dependencies]
actix-web = "1" # backend-server
actix-rt = "0.2" # backend-server
futures = "0.1" # backend-server
quick-xml = "0.14" # read xml-files
rand = "0.7" # generate random numbers
rand_pcg = "0.2" # generate random numbers
criterion = "0.3" # benchmarking
